import{_ as s,c as n,o as a,a as t}from"./app.7f688f53.js";const g='{"title":"API","description":"","frontmatter":{},"headers":[{"level":2,"title":"Parser","slug":"parser"},{"level":2,"title":"Processor","slug":"processor"},{"level":2,"title":"Compiler","slug":"compiler"}],"relativePath":"guide/api.md","lastUpdated":1639843992941}',p={},o=t(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h1><h2 id="parser" tabindex="-1">Parser <a class="header-anchor" href="#parser" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parse</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> postfix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> FunctionExpression<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">FunctionExpression</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  params<span class="token operator">:</span> <span class="token punctuation">{</span> content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> functions<span class="token operator">?</span><span class="token operator">:</span> FunctionExpression<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>
  range<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span>
  content<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="processor" tabindex="-1">Processor <a class="header-anchor" href="#processor" aria-hidden="true">#</a></h2><p>see <a href="https://github.com/beicause/csvg/blob/master/packages/csvg/src/process.ts" target="_blank" rel="noopener noreferrer">src/processor.ts</a> for detailed options</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Processor<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
  options<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> processRandom<span class="token operator">:</span> Processor<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    seed<span class="token operator">:</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Initial seed for generate random number</span>
    fractionDigits<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token comment">// fraction digits of random number</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> processRepeat<span class="token operator">:</span> Processor<span class="token punctuation">;</span>
<span class="token keyword">const</span> processIndex<span class="token operator">:</span> Processor<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Map: id of each increasing =&gt; saved number</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> processSet<span class="token operator">:</span> Processor<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    storage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// shared with get</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> processGet<span class="token operator">:</span> Processor<span class="token operator">&lt;</span><span class="token punctuation">{</span>
    storage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// shared with set</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> processCalc<span class="token operator">:</span> Processor<span class="token punctuation">;</span>
</code></pre></div><h2 id="compiler" tabindex="-1">Compiler <a class="header-anchor" href="#compiler" aria-hidden="true">#</a></h2><div class="language-ts"><pre><code><span class="token keyword">class</span> <span class="token class-name">Compiler</span> <span class="token punctuation">{</span>
    prefix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// prefix added to function name</span>
    postfix<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// postfix of high priority function</span>
    processors<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Processor<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">;</span> <span class="token comment">// Map: function name =&gt; processor to hand it</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">use</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> processor<span class="token operator">:</span> Processor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// insert the pair into this.processors </span>
    <span class="token function">remove</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// remove the pair from this.processors</span>
    <span class="token function">compile</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// use this.processors to process input and return the result</span>
    <span class="token keyword">static</span> <span class="token function">optimize</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token operator">?</span><span class="token operator">:</span> OptimizeOptions<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;svgo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>OptimizedSvg<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// use svgo</span>
<span class="token punctuation">}</span>
</code></pre></div>`,8),e=[o];function c(r,l,i,u,k,d){return a(),n("div",null,e)}var h=s(p,[["render",c]]);export{g as __pageData,h as default};
